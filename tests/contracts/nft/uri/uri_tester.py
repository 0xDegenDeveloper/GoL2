import subprocess

command = 'snforge test contracts::nft::uri_svg --ignored'
print('\nRunning: `' + command + '`, parsing output, and converting to ASCII...\n')

# Execute snforge test command
process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
# Decode the process output
cairo_output = process.communicate()[0].decode('utf-8')

expected_output = '''data:application/json,{"name":"GoL2%20%232","description":"Snapshot%20of%20GoL2%20Game%20at%20Generation%20%232","image":"data:image/svg+xml,%253Csvg%2520xmlns=%2522http://www.w3.org/2000/svg%2522%2520width=%2522910%2522%2520height=%2522910%2522%2520viewBox=%25220%25200%2520910%2520910%2522%253E%253Cg%2520transform=%2522translate(5%25205)%2522%253E%253Crect%2520width=%2522900%2522%2520height=%2522900%2522%2520fill=%2522%25231e222b%2522/%253E%253Cg%2520stroke=%2522%25235e6266%2522%2520stroke-width=%25221%2522%253E%253Cline%2520x1=%25220%2522%2520y1=%252260%2522%2520x2=%2522900%2522%2520y2=%252260%2522/%253E%253Cline%2520x1=%252260%2522%2520y1=%25220%2522%2520x2=%252260%2522%2520y2=%2522900%2522/%253E%253Cline%2520x1=%25220%2522%2520y1=%2522120%2522%2520x2=%2522900%2522%2520y2=%2522120%2522/%253E%253Cline%2520x1=%2522120%2522%2520y1=%25220%2522%2520x2=%2522120%2522%2520y2=%2522900%2522/%253E%253Cline%2520x1=%25220%2522%2520y1=%2522180%2522%2520x2=%2522900%2522%2520y2=%2522180%2522/%253E%253Cline%2520x1=%2522180%2522%2520y1=%25220%2522%2520x2=%2522180%2522%2520y2=%2522900%2522/%253E%253Cline%2520x1=%25220%2522%2520y1=%2522240%2522%2520x2=%2522900%2522%2520y2=%2522240%2522/%253E%253Cline%2520x1=%2522240%2522%2520y1=%25220%2522%2520x2=%2522240%2522%2520y2=%2522900%2522/%253E%253Cline%2520x1=%25220%2522%2520y1=%2522300%2522%2520x2=%2522900%2522%2520y2=%2522300%2522/%253E%253Cline%2520x1=%2522300%2522%2520y1=%25220%2522%2520x2=%2522300%2522%2520y2=%2522900%2522/%253E%253Cline%2520x1=%25220%2522%2520y1=%2522360%2522%2520x2=%2522900%2522%2520y2=%2522360%2522/%253E%253Cline%2520x1=%2522360%2522%2520y1=%25220%2522%2520x2=%2522360%2522%2520y2=%2522900%2522/%253E%253Cline%2520x1=%25220%2522%2520y1=%2522420%2522%2520x2=%2522900%2522%2520y2=%2522420%2522/%253E%253Cline%2520x1=%2522420%2522%2520y1=%25220%2522%2520x2=%2522420%2522%2520y2=%2522900%2522/%253E%253Cline%2520x1=%25220%2522%2520y1=%2522480%2522%2520x2=%2522900%2522%2520y2=%2522480%2522/%253E%253Cline%2520x1=%2522480%2522%2520y1=%25220%2522%2520x2=%2522480%2522%2520y2=%2522900%2522/%253E%253Cline%2520x1=%25220%2522%2520y1=%2522540%2522%2520x2=%2522900%2522%2520y2=%2522540%2522/%253E%253Cline%2520x1=%2522540%2522%2520y1=%25220%2522%2520x2=%2522540%2522%2520y2=%2522900%2522/%253E%253Cline%2520x1=%25220%2522%2520y1=%2522600%2522%2520x2=%2522900%2522%2520y2=%2522600%2522/%253E%253Cline%2520x1=%2522600%2522%2520y1=%25220%2522%2520x2=%2522600%2522%2520y2=%2522900%2522/%253E%253Cline%2520x1=%25220%2522%2520y1=%2522660%2522%2520x2=%2522900%2522%2520y2=%2522660%2522/%253E%253Cline%2520x1=%2522660%2522%2520y1=%25220%2522%2520x2=%2522660%2522%2520y2=%2522900%2522/%253E%253Cline%2520x1=%25220%2522%2520y1=%2522720%2522%2520x2=%2522900%2522%2520y2=%2522720%2522/%253E%253Cline%2520x1=%2522720%2522%2520y1=%25220%2522%2520x2=%2522720%2522%2520y2=%2522900%2522/%253E%253Cline%2520x1=%25220%2522%2520y1=%2522780%2522%2520x2=%2522900%2522%2520y2=%2522780%2522/%253E%253Cline%2520x1=%2522780%2522%2520y1=%25220%2522%2520x2=%2522780%2522%2520y2=%2522900%2522/%253E%253Cline%2520x1=%25220%2522%2520y1=%2522840%2522%2520x2=%2522900%2522%2520y2=%2522840%2522/%253E%253Cline%2520x1=%2522840%2522%2520y1=%25220%2522%2520x2=%2522840%2522%2520y2=%2522900%2522/%253E%253C/g%253E%253Cg%2520fill=%2522%2523dff17b%2522%2520stroke=%2522%2523dff17b%2522%2520stroke-width=%25220.5%2522%253E%253Crect%2520width=%252260%2522%2520height=%252260%2522%2520transform=%2522translate(480%2520420)%2522/%253E%253Crect%2520width=%252260%2522%2520height=%252260%2522%2520transform=%2522translate(540%2520420)%2522/%253E%253Crect%2520width=%252260%2522%2520height=%252260%2522%2520transform=%2522translate(600%2520420)%2522/%253E%253Crect%2520width=%252260%2522%2520height=%252260%2522%2520transform=%2522translate(720%2520420)%2522/%253E%253Crect%2520width=%252260%2522%2520height=%252260%2522%2520transform=%2522translate(780%2520420)%2522/%253E%253Crect%2520width=%252260%2522%2520height=%252260%2522%2520transform=%2522translate(720%2520480)%2522/%253E%253Crect%2520width=%252260%2522%2520height=%252260%2522%2520transform=%2522translate(780%2520480)%2522/%253E%253Crect%2520width=%252260%2522%2520height=%252260%2522%2520transform=%2522translate(780%2520540)%2522/%253E%253C/g%253E%253Crect%2520width=%2522900%2522%2520height=%2522900%2522%2520fill=%2522none%2522%2520stroke=%2522%25230a0c10%2522%2520stroke-width=%25225%2522/%253E%253C/g%253E%253C/svg%253E","external_url":"https://gol2.io","attributes": [{"trait_type":"Game%20Mode","value":"Infinite"},{"trait_type":"Timestamp","value":222},{"trait_type":"Cell%20Count","value":8},{"trait_type":"Copies","value":1},{"trait_type":"Generation","value":2}]}'''
returned_output = ""
try:
    returned_output = ''.join(bytes.fromhex(line.split('raw: ')[1][2:]).decode('ascii', errors='ignore') for line in cairo_output.split('\n') if 'raw' in line)
except Exception as e:
    print('Error decoding output: ' + e)


if expected_output == returned_output:
    print('Test passed!\n')
    print("Copy this output and paste it into a browser to view the JSON:\n\n" + returned_output, '\n')
else:
    print('Test failed! (Output does not match expected output)\n')


